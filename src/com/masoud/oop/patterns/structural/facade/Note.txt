Facade is a structural design pattern that provides a simplified interface to a library,
a framework, or any other complex set of classes.


Imagine that you must make your code work with a broad set of objects that belong to a
sophisticated library or framework. Ordinarily, youâ€™d need to initialize all of those objects, keep
track of dependencies, execute methods in the correct order, and so on.

As a result, the business logic of your classes would become tightly coupled to
the implementation details of 3rd-party classes, making it hard to comprehend and maintain.


a facade encapsulates a complex subsystem behind a simple interface.
It hides much of the complexity and makes the subsystem easy to use.


Adapter pattern links two incompatible interfaces.
Facade pattern simplifies a complex relation between a clients code and a layer (library , ....)
